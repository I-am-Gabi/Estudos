// UFRN-CT-DCA
// Author: kaduardo (baseado em código fornecido por Ivanovitch)
// Manipulação de tempo em c,c++
// Programa: programa que usa manipuladores de tempo para 
// medir a performance de uma função


#include <sys/time.h>   // time()
#include <stdlib.h>  // exit()
#include <fstream>   // close,open,ofstream
#include <iostream>  // cin, cout

typedef unsigned long long int uint64;

//Vetor usado para demonstração
int *vetorBase;
int tamanho;


//Observe que os números são gerados aleatorios baseados
//em uma semente. Se for passado a mesma semente, os 
//números aleatórios serão os mesmos
void criarVetor(int tamanhoVetor, int semente){
  srand (semente);
  vetorBase = new int[tamanhoVetor];
  for (int i=0;i<tamanhoVetor;i++){
    vetorBase[i] =  rand()%100000;
  }
}

int funcao1(int *vetor, int tamanho) {
  int res = 0;
  for (int j = 0; j < tamanho; j++) {
    for (int i = 0; i < tamanho; i++) {
      res += vetor[i];
    }
  }
  std::cout << "Somatorio: " << res << std::endl;
  return res;
}

int funcao2(int *vetor, int tamanho) {
  int res;
  if (tamanho == 0) {
    res = 0;
  } else {
    res = vetor[tamanho-1] + funcao2(vetor, tamanho - 1);
  }
  //std::cout << "Somatorio recursivo: " << res << std::endl;
  return res;
}

int main (){
  //Escrever resultados em arquivos .txt
  std::ofstream arquivoSaida;
  arquivoSaida.open("saida.txt");
  
  //Variaveis usadas para as medições de desempenho
  struct timeval t0, t1;
  uint64 tempo;

  //Variando o tamanho dos vetores
  for (int n = 25000; n <= 100000; n += 25000){
    //Criar vetor com elementos aleatorios[0,100000] 
    criarVetor(n,23);

    //Medir o tempo gasto pela função1
    gettimeofday(&t0, NULL);
    //Chamada da função
    funcao1 (vetorBase, n);
    //Registrando o tempo de término
    gettimeofday(&t1, NULL);
    tempo = (t1.tv_sec - t0.tv_sec) * 1000000; //microsegundos
    tempo +- t1.tv_usec - t0.tv_usec;
    //Imprimir o resultado no arquivo .txt
    arquivoSaida << n << "\t" << tempo << "\t";
    //arquivoSaida << n << "\t" << (double)(clock_2-clock_1)/(double)CLOCKS_PER_SEC << "\t";

    //Medir o tempo gasto pela funcao2
    gettimeofday(&t0, NULL);
    //Ordenar utilizando bubleSort
    funcao2(vetorBase,n);
    gettimeofday(&t1, NULL);
    tempo = (t1.tv_sec - t0.tv_sec) * 1000000; //microsegundos
    tempo +- t1.tv_usec - t0.tv_usec;
    //Imprimir o resultado no arquivo .txt
    arquivoSaida << n << "\t" << tempo << "\n";
  }
 //fechando o arquivo de saida .txt
  arquivoSaida.close();

   //Imprimindo o resultado no Gnuplot
 system("gnuplot performance.gnuplot");

  exit(0);
}
